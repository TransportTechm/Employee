'use strict';

exports.__esModule = true;

var _simpleOauth = require('simple-oauth2');

var _simpleOauth2 = _interopRequireDefault(_simpleOauth);

var _Logger = require('./Logger');

var _Logger2 = _interopRequireDefault(_Logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function noop() {}

var OAuth2Util = function () {

    /*
     Constructor to initialize the OAuth2Util
     */
    function OAuth2Util() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, OAuth2Util);

        this.logger = config.logger || new _Logger2.default();
        this.logger.debug('Initializing OAuth2Util');

        this.credentials = {
            client: {
                id: config.client_id,
                secret: config.client_secret
            },
            auth: {
                tokenHost: config.access_token_uri
            }
        };

        this.oauth2 = _simpleOauth2.default.create(this.credentials);
        this.token = {};
    }

    /*
     Get Access Token for the Client Credentials via OAuth2 Authentication
     */


    OAuth2Util.prototype.getTokenForClientCredentials = function getTokenForClientCredentials() {
        var _this = this;

        var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;

        var tokenConfig = {};
        this.oauth2.clientCredentials.getToken(tokenConfig, function (error, result) {
            if (error) {
                _this.logger.warn('Error occurred while getting Access Token via OAuth2 Client Credentials', error);
            } else {
                _this.token = _this.oauth2.accessToken.create(result).token;
                _this.logger.debug('Access Token has been fetched using Client Credentials');
            }

            return callback(error, _this.token);
        });
    };

    return OAuth2Util;
}();

exports.default = OAuth2Util;